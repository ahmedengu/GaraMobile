/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */


package userclasses;

import com.codename1.components.ToastBar;
import com.codename1.googlemaps.MapContainer;
import com.codename1.io.Preferences;
import com.codename1.maps.Coord;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.list.MultiList;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.util.Resources;
import com.g_ara.gara.controller.MapController;
import com.parse4cn1.*;
import generated.StateMachineBase;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static com.g_ara.gara.controller.CarsController.*;
import static com.g_ara.gara.controller.ChatController.*;
import static com.g_ara.gara.controller.DriveSummary.beforeDriveSummaryForm;
import static com.g_ara.gara.controller.DriveSummary.confirmAction;
import static com.g_ara.gara.controller.GroupsController.beforeGroupsForm;
import static com.g_ara.gara.controller.GroupsController.newGroup;
import static com.g_ara.gara.controller.HomeController.*;
import static com.g_ara.gara.controller.RideMap.beforeRideMapForm;
import static com.g_ara.gara.controller.SettingsController.*;
import static com.g_ara.gara.controller.UserController.*;
import static com.g_ara.gara.controller.UserSearch.searchAction;
import static com.g_ara.gara.controller.UserSearch.usersAction;

/**
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {
    public static java.util.Map<String, Object> data = new HashMap<>();

    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }

    /**
     * this method should be used to initialize variables instead of
     * the constructor/class scope to avoid race conditions
     */
    protected void initVars(Resources res) {
        Parse.initialize("http://localhost:1337/parse", "myAppId", "master");
    }

    @Override
    protected String getFirstFormName() {
        if (onStart()) {
            return "Home";
        } else
            return super.getFirstFormName();
    }

    @Override
    protected void beforeHome(Form f) {
        beforeHomeForm(f, fetchResourceFile(), findDrive(f), findRide(f));
    }

    @Override
    protected void onCars_CarsAction(Component c, ActionEvent event) {
        showForm("Car", null);
    }


    @Override
    protected void onGroups_GroupsAction(Component c, ActionEvent event) {
        showForm("Group", null);
    }

    @Override
    protected void onHome_RideAction(Component c, ActionEvent event) {
        rideAction(this);
    }


    @Override
    protected void onHome_DriveAction(Component c, ActionEvent event) {
        driveAction(this);

    }


    @Override
    protected boolean allowBackTo(String formName) {
        if (formName.indexOf("Login") != -1 || formName.indexOf("Register") != -1)
            return false;
        return super.allowBackTo(formName);
    }

    @Override
    protected void onLogin_LoginAction(Component c, ActionEvent event) {
        login(findUsername(), findPassword(), this);
    }

    @Override
    protected void onRegister_PicAction(Component c, ActionEvent event) {
        addPic(findPic());

    }

    @Override
    protected void onRegister_RegisterAction(Component c, ActionEvent event) {
        register(findUsername(), findPassword(), findName(), findEmail(), findMobile(), findPic(), this);
    }


    @Override
    protected void beforeGroups(Form f) {
        beforeGroupsForm(f, (MultiList) findGroups());
    }

    @Override
    protected void onNewGroup_NewAction(Component c, ActionEvent event) {
        newGroup(findEmail(), this);
    }


    @Override
    protected void onCar_SaveAction(Component c, ActionEvent event) {
        addCar(findName(), findYear(), ((Container) findPics()), this);
    }


    @Override
    protected void onCar_AddAction(Component c, ActionEvent event) {
        addCarPic(((Container) findPics()));
    }

    @Override
    protected void beforeCars(Form f) {
        beforeCarsForm(f, (MultiList) findCars());
    }

    @Override
    protected void beforeSettings(Form f) {
        analyticsState(Preferences.get("Analytics", true), findAnalytics());
    }

    @Override
    protected void onSettings_AnalyticsAction(Component c, ActionEvent event) {
        analyticsAciton(findAnalytics());
    }

    @Override
    protected void onSettings_WebsiteAction(Component c, ActionEvent event) {
        websiteAction();
    }

    @Override
    protected void onSettings_RateAction(Component c, ActionEvent event) {
        rateAction();
    }

    @Override
    protected void onSettings_FeedbackAction(Component c, ActionEvent event) {
        feedbackAction();
    }


    @Override
    protected void onProfile_SaveAction(Component c, ActionEvent event) {
        saveUser(findUsername(), findPassword(), findMobile(), findPic(), this);

    }


    @Override
    protected void beforeProfile(Form f) {
        beforeProffileForm(findName(), findUsername(), findPassword(), findMobile(), findPic(), findEmail());
    }


    @Override
    protected void onProfile_PicAction(Component c, ActionEvent event) {
        addPic(findPic());
    }

    @Override
    protected void onLogin_ResetAction(Component c, ActionEvent event) {
        resetPassword(findUsername());
    }

    @Override
    protected boolean onHomeLogout() {
        logout(this);
        return true;
    }


    @Override
    protected void postLogin(Form f) {
//        onStart(this);
    }


    @Override
    protected void beforeConversion(Form f) {
        beforeConversionForm(findMessages());

    }


    @Override
    protected void beforeChat(Form f) {
        beforeChatForm((MultiList) findChat(), fetchResourceFile());
    }


    @Override
    protected void onUserSearch_SearchAction(Component c, ActionEvent event) {
        searchAction(findSearchField(), findUsers(), fetchResourceFile());
    }


    @Override
    protected void onUserSearch_UsersAction(Component c, ActionEvent event) {
        usersAction(this, findUsers());

    }


    @Override
    protected void onChat_ChatAction(Component c, ActionEvent event) {
        chatAction(this, (MultiList) findChat());
    }


    @Override
    protected void onConversion_SendAction(Component c, ActionEvent event) {
        conversionSendActcion(findMessage(), findMessages());
    }

    @Override
    protected void onDriveSummary_ConfirmAction(Component c, ActionEvent event) {
        confirmAction(this, findToll(), findCost());
    }


    @Override
    protected void beforeDriveSummary(Form f) {
        beforeDriveSummaryForm(findSummary());
    }


    @Override
    protected void beforeRideMap(Form f) {
        beforeRideMapForm(f, fetchResourceFile(), this);
    }


    @Override
    protected void beforeRequests(Form f) {


        try {
            List<ParseObject> results = new ArrayList<>();
            if (data.get("active") != null && ((ParseObject) data.get("active")).getClassName().equals("Trip")) {
                ParseQuery<ParseObject> q = ParseQuery.getQuery("TripRequest");
                q.include("user");
                q.whereEqualTo("trip", ((ParseObject) data.get("active"))).whereEqualTo("accept", -1).whereEqualTo("inactive", false);
                results = q.find();
            }

            MapContainer map = new MapController(fetchResourceFile(), f).map;
            for (int i = 0; i < results.size(); i++) {
                final ParseObject object = results.get(i);
                ParseGeoPoint location = object.getParseObject("user").getParseGeoPoint("location");
                map.addMarker(FontImage.createMaterial(FontImage.MATERIAL_PERSON_PIN_CIRCLE, new Style()).toEncodedImage(), new Coord(location.getLatitude(), location.getLongitude()), "", "", evt -> {
                    Dialog dialog = new Dialog("Requests");
                    dialog.setLayout(new BorderLayout());
                    Label label = new Label("User: " + object.getParseObject("user").getString("username"));
                    Button cancel = new Button("Reject");
                    cancel.addActionListener(evt1 -> {
                        object.put("accept", 0);
                        try {
                            object.save();
                        } catch (ParseException e) {
                            e.printStackTrace();
                            ToastBar.showErrorMessage(e.getMessage());
                        }
                        dialog.dispose();
                    });

                    Button confirm = new Button("Accept");
                    confirm.addActionListener(evt1 -> {
                        object.put("accept", 1);
                        ParseObject trip = object.getParseObject("trip");
                        trip.addUniqueToArrayField("tripRequests", object);
                        try {
                            ParseBatch batch = ParseBatch.create();
                            batch.addObject(object, ParseBatch.EBatchOpType.UPDATE);
                            batch.addObject(trip, ParseBatch.EBatchOpType.UPDATE);
                            batch.execute();
                        } catch (ParseException e) {
                            e.printStackTrace();
                            ToastBar.showErrorMessage(e.getMessage());
                        }
                        dialog.dispose();
                    });
                    Container container = new Container();
                    container.add(cancel);
                    container.add(confirm);
                    dialog.add(BorderLayout.CENTER, label);
                    dialog.add(BorderLayout.SOUTH, container);
                    dialog.show();

                });
            }


        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }
    }


}
