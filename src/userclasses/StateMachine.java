/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */


package userclasses;

import com.codename1.components.ToastBar;
import com.codename1.io.Preferences;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.list.MultiList;
import com.codename1.ui.util.Resources;
import com.g_ara.gara.controller.MapController;
import com.parse4cn1.*;
import generated.StateMachineBase;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.g_ara.gara.controller.CarsController.*;
import static com.g_ara.gara.controller.GroupsController.beforeGroupsForm;
import static com.g_ara.gara.controller.GroupsController.newGroup;
import static com.g_ara.gara.controller.SettingsController.*;
import static com.g_ara.gara.controller.UserController.*;

/**
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {
    java.util.Map<String, Object> data = new HashMap<>();

    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }

    /**
     * this method should be used to initialize variables instead of
     * the constructor/class scope to avoid race conditions
     */
    protected void initVars(Resources res) {
        Parse.initialize("http://localhost:1337/parse", "myAppId", "master");

    }

    @Override
    protected void beforeHome(Form f) {
        f.setBackCommand(null);
        new MapController(fetchResourceFile()).initMap(f);
    }

    @Override
    protected void onCars_CarsAction(Component c, ActionEvent event) {
        showForm("Car", null);
    }


    @Override
    protected void onGroups_GroupsAction(Component c, ActionEvent event) {
        showForm("Group", null);


    }

    @Override
    protected void onHome_RideAction(Component c, ActionEvent event) {
        if (MapController.getDestCoord() == null) {
            ToastBar.showErrorMessage("You should choose a destination");
            return;
        }
        if (MapController.getLocationCoord() == null) {
            ToastBar.showErrorMessage("GPS is required");
            return;
        }
        Dialog.show("ride", "details", null, null);
    }

    @Override
    protected void onHome_DriveAction(Component c, ActionEvent event) {
        if (MapController.getDestCoord() == null) {
            ToastBar.showErrorMessage("You should choose a destination");
            return;
        }
        if (MapController.getLocationCoord() == null) {
            ToastBar.showErrorMessage("GPS is required");
            return;
        }
        if (Preferences.get("cars", "").length() == 0) {
            ToastBar.showErrorMessage("You dont have any cars");
            return;
        }

        Dialog.show("ride", "details", null, null);


    }

    @Override
    protected boolean allowBackTo(String formName) {
        if (formName.indexOf("Login") != -1 || formName.indexOf("Register") != -1)
            return false;
        return super.allowBackTo(formName);
    }

    @Override
    protected void onLogin_LoginAction(Component c, ActionEvent event) {
        login(findUsername(), findPassword(), this);
    }

    @Override
    protected void onRegister_PicAction(Component c, ActionEvent event) {
        addPic(findPic());

    }

    @Override
    protected void onRegister_RegisterAction(Component c, ActionEvent event) {
        register(findUsername(), findPassword(), findName(), findEmail(), findMobile(), findPic(), this);
    }


    @Override
    protected void beforeGroups(Form f) {
        beforeGroupsForm(f, (MultiList) findGroups());
    }

    @Override
    protected void onNewGroup_NewAction(Component c, ActionEvent event) {
        newGroup(findEmail(), this);
    }


    @Override
    protected void onCar_SaveAction(Component c, ActionEvent event) {
        addCar(findName(), findYear(), ((Container) findPics()), this);
    }


    @Override
    protected void onCar_AddAction(Component c, ActionEvent event) {
        addCarPic(((Container) findPics()));
    }

    @Override
    protected void beforeCars(Form f) {
        beforeCarsForm(f, (MultiList) findCars());
    }

    @Override
    protected void beforeSettings(Form f) {
        analyticsState(Preferences.get("Analytics", true), findAnalytics());
    }

    @Override
    protected void onSettings_AnalyticsAction(Component c, ActionEvent event) {
        analyticsAciton(findAnalytics());
    }

    @Override
    protected void onSettings_WebsiteAction(Component c, ActionEvent event) {
        websiteAction();
    }

    @Override
    protected void onSettings_RateAction(Component c, ActionEvent event) {
        rateAction();
    }

    @Override
    protected void onSettings_FeedbackAction(Component c, ActionEvent event) {
        feedbackAction();
    }


    @Override
    protected void onProfile_SaveAction(Component c, ActionEvent event) {
        saveUser(findUsername(), findPassword(), findMobile(), findPic(), this);

    }


    @Override
    protected void beforeProfile(Form f) {
        beforeProffileForm(findName(), findUsername(), findPassword(), findMobile(), findPic(), findEmail());
    }


    @Override
    protected void onProfile_PicAction(Component c, ActionEvent event) {
        addPic(findPic());
    }

    @Override
    protected void onLogin_ResetAction(Component c, ActionEvent event) {
        resetPassword(findUsername());
    }

    @Override
    protected boolean onHomeLogout() {
        logout(this);
        return true;
    }


    @Override
    protected void postLogin(Form f) {
        onStart(this);

    }


    @Override
    protected void beforeConversion(Form f) {
        try {
            ParseQuery<ParseObject> query = ParseQuery.getQuery("Message");
            query.whereEqualTo("chat", (ParseObject) data.get("chat"));
            List<ParseObject> results = query.find();
            for (int i = 0; i < results.size(); i++) {
                addMessage(results.get(i));
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }

    }

    private void addMessage(ParseObject results) {
        addMessage(results, false);
    }

    private void addMessage(ParseObject results, boolean repaint) {
        Label message = new Label(results.getString("message"));
        findMessages().add(message);
        if (repaint)
            findMessages().repaint();
    }

    @Override
    protected void beforeChat(Form f) {
        try {
            ParseQuery<ParseObject> query = ParseQuery.getQuery("Chat");
            query.include("members");
            query.whereEqualTo("members", ParseUser.getCurrent());
            List<ParseObject> results = query.find();

            if (results.size() > 0) {
                ArrayList<Map<String, Object>> data = new ArrayList<>();

                for (int i = 0; i < results.size(); i++) {
                    Map<String, Object> entry = new HashMap<>();
                    entry.put("Line1", ((ParseUser) results.get(i).getList("members").get(1)).getUsername());
                    EncodedImage placeholder = EncodedImage.createFromImage(fetchResourceFile().getImage("profile_icon.png"), false);
                    String url = ((ParseUser) results.get(i).getList("members").get(1)).getParseFile("pic").getUrl();
                    entry.put("icon", URLImage.createToStorage(placeholder, url.substring(url.lastIndexOf("/") + 1), url));

                    entry.put("object", results.get(i));
                    data.add(entry);
                }

                ((MultiList) findChat()).setModel(new DefaultListModel<>(data));
            }

        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }
    }


    @Override
    protected void onUserSearch_SearchAction(Component c, ActionEvent event) {
        try {
            ParseQuery<ParseUser> query = ParseQuery.getQuery("_User");
            query.whereStartsWith("username", findSearchField().getText());
//            query.whereStartsWith("name", findSearchField().getText());
//            query.whereStartsWith("email", findSearchField().getText());

            List<ParseUser> results = query.find();

            if (results.size() > 0) {
                ArrayList<Map<String, Object>> data = new ArrayList<>();

                for (int i = 0; i < results.size(); i++) {
                    Map<String, Object> entry = new HashMap<>();
                    entry.put("Line1", results.get(i).getUsername());
                    entry.put("Line2", results.get(i).getString("name"));
                    EncodedImage placeholder = EncodedImage.createFromImage(fetchResourceFile().getImage("profile_icon.png"), false);
                    String url = results.get(i).getParseFile("pic").getUrl();
                    entry.put("icon", URLImage.createToStorage(placeholder, url.substring(url.lastIndexOf("/") + 1), url));
                    entry.put("object", results.get(i));
                    data.add(entry);
                }

                findUsers().setModel(new DefaultListModel<>(data));
            }
        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }
    }

    @Override
    protected void onUserSearch_UsersAction(Component c, ActionEvent event) {
        try {
            Map<String, Object> itemAt = (Map<String, Object>) findUsers().getSelectedItem();
            ParseUser object = (ParseUser) itemAt.get("object");

            List<ParseUser> parseUsers = new ArrayList<>();
            parseUsers.add(ParseUser.getCurrent());
            parseUsers.add(object);

            ParseQuery<ParseObject> query = ParseQuery.getQuery("Chat");
            query.whereContainsAll("members", parseUsers);
            List<ParseObject> results = query.find();

            ParseObject chat;
            if (results.size() > 0) {
                chat = results.get(0);
            } else {
                chat = ParseObject.create("Chat");
                chat.put("members", parseUsers);
                chat.save();
            }

            data.put("chat", chat);
            showForm("Conversion", null);
        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }

    }

    @Override
    protected void onChat_ChatAction(Component c, ActionEvent event) {
        Map<String, Object> itemAt = (Map<String, Object>) ((MultiList) findChat()).getSelectedItem();
        ParseObject object = (ParseObject) itemAt.get("object");
        data.put("chat", object);
        showForm("Conversion", null);
    }


    @Override
    protected void onConversion_SendAction(Component c, ActionEvent event) {
        try {
            ParseObject message = ParseObject.create("Message");
            message.put("message", findMessage().getText());
            message.put("from", ParseUser.getCurrent());
            message.put("chat", (ParseObject) data.get("chat"));
            message.save();
            findMessage().setText("");
            addMessage(message, true);
        } catch (ParseException e) {
            e.printStackTrace();
            ToastBar.showErrorMessage(e.getMessage());
        }
    }
}
